{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "GameGenerationLanguge",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#punctuations"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#literal"
		},
		{	
			"include": "#comment"
		},
		{
			"include": "#support"
		},
		{
			"include": "#sectionSymbols"
		},
		{
			"comment": "imports",
			"begin": "(import)\\(\\\"ga:\\\/\\\/([a-zA-Z~]+)@\\\/?(\\w+)\\.ggl\\\"\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.ggl.import"
				},
				"2": {
					"name": "entity.name.selector.ggl.import"
				},
				"3": {
					"name": "entity.name.section.ggl.import"
				}
			},
			"end": "(;)",
			"endCaptures": {
				"1": {
					"name": "punctuation.terminator.statement.ggl"	
				}
			}
		},
		{
			"comment": "function implementation",
			"begin": "(\\s*function\\s+)(\\w+)\\s*(\\([\\S ]*\\))",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.ggl"
				},
				"2": {
					"name": "entity.name.function.ggl"
				},
				"3":{
					"name": "variable.parameter.ggl",
					"patterns": [
						{
							"match": "(var) (\\w+)\\s*?=?\\s*(\\w*\\((?>[^)(]+|\\g<1>)*\\))*",
							"captures": {
								"1": {
									"name": "storage.type.variable.ggl"
								},
								"2": {
									"name": "variable.other.readwrite.ggl.local"
								},
								"3": {
									"name": "meta.tag.defaultValue.ggl"
								}
							}
						}
					]
				}
			},
			"patterns": [
				{
					"include": "$base"
				}
			],
			"end": "(\\s*)",
			"name": "meta.declaration.ggl.function"
		},
		{
			"comment": "variable declaration",
			"begin": "(\\s*var\\s+)([a-z,A-Z,0-9,_]+)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.variable.ggl"
				},
				"2": {
					"name": "variable.other.readwrite.ggl"
				}
			},
			"end": "\\s*(=)?(;)?",
			"endCaptures": {
				"1": {
					"name": "keyword.operator.ggl"
				},
				"2": {
					"name": "punctuation.terminator.statement.ggl"
				}
			}
		},
		{
			"comment": "function declaration",
			"begin": "(\\s*function\\s+)([a-z,A-Z,0-9,_]+)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.ggl"
				},
				"2": {
					"name": "entity.name.function.ggl"
				}
			},
			"end": "(\\([\\w, ,=,\\,\\(\\)\"\\.\\#\\'\\]\\[]*\\))",

			"endCaptures": {
					"1": {
						"name": "variable.parameter.ggl"
					}
				},
			"name": "meta.declaration.ggl"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ggl.nobuiltin",
					"match": "\\b(if|else|for|do|while|assert|then|case|switch|default|break|return)\\b"
				},
				{
					"name": "keyword.operator.ggl",					
					"match": "(\\=|\\+|\\-|\\<|\\>|\\*)"
				}
			]
		},
		"punctuations": {
			"patterns": [
				{
					"match": "(;)",
					"name": "punctuation.terminator.statement.ggl"
				},
				{
					"match": "(,)",
					"name": "punctuation.separator.delimiter.ggl"
				}
			]			
		},
		"sectionSymbols": {
			"patterns": [
				{
					"name": "meta.declaration.ggl.secexit",
					"match": "(})"
				},
				{
					"name": "meta.declaration.ggl.secentry",
					"match": "({)"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.ggl",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ggl",
					"match": "\\\\."
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.ggl",
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"name": "constant.language.ggl",
					"match": "\\b(true|false|none)\\b"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.ggl",
					"begin": "//",
					"end": "\n"
				},
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]		
		},
		"support": {
			"patterns": [
			]		
		},
		"storage":{
			"patterns": [
				{
					"name":"storage.type.variable",
					"match": "\\s*var\\s+"
				},{
					"name":"storage.type.function",
					"match": "\\s*function\\s+"
				}
			]
		}
	},
	"scopeName": "source.genesisGGL"
	
}